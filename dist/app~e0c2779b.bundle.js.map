{"version":3,"file":"app~e0c2779b.bundle.js","mappings":"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","sources":["webpack://restaurant-apps/./src/scripts/global/api.js","webpack://restaurant-apps/./src/scripts/global/base-data.js","webpack://restaurant-apps/./src/scripts/global/favorite-resto.js","webpack://restaurant-apps/./src/scripts/swregister.js","webpack://restaurant-apps/./src/scripts/index.js","webpack://restaurant-apps/./src/scripts/nowyear.js","webpack://restaurant-apps/./src/scripts/routes/routes.js","webpack://restaurant-apps/./src/scripts/routes/url-parser.js"],"sourcesContent":["import Base from './base-data'\r\n\r\nconst Restaurants = {\r\n  optionGet: {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  },\r\n  async getAll() {\r\n    try {\r\n      const response = await fetch(`${Base.API_URL}/list`, this.optionGet)\r\n      if (response.ok) {\r\n        return response.json()\r\n      }\r\n      throw new Error('Fetch all error.')\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async getById(id) {\r\n    try {\r\n      const response = await fetch(`${Base.API_URL}/detail/${id}`, {\r\n        cache: 'reload'\r\n      })\r\n      if (response.ok) {\r\n        return response.json()\r\n      }\r\n      throw new Error('Fetch restaurant By ID Error.')\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async postReview({ id, name, review }) {\r\n    try {\r\n      const response = await fetch(`${Base.API_URL}/review`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          id,\r\n          name,\r\n          review\r\n        })\r\n      })\r\n      if (response.ok) {\r\n        return response\r\n      }\r\n      throw new Error('No data')\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  }\r\n}\r\nexport default Restaurants\r\n","const Base = {\r\n  API_URL: 'https://restaurant-api.dicoding.dev',\r\n  IMG_PATH_SMALL: '/images/small/',\r\n  IMG_PATH_MEDIUM: '/images/medium/',\r\n  DATABASE_NAME: 'restaurant-db',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'restaurants'\r\n}\r\nexport default Base\r\n","import { openDB } from 'idb'\r\nimport Base from './base-data'\r\n\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = Base\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' })\r\n  }\r\n})\r\n\r\nconst FavoriteResto = {\r\n  async getResto(id) {\r\n    if (!id) {\r\n      return\r\n    }\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id)\r\n  },\r\n  async getAllRestos() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME)\r\n  },\r\n  async addResto(resto) {\r\n    if (!resto.hasOwnProperty('id')) {\r\n      return\r\n    }\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, resto)\r\n  },\r\n  async deleteResto(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id)\r\n  }\r\n}\r\n\r\nexport default FavoriteResto\r\n","import * as WorkboxWindow from 'workbox-window'\r\n\r\nconst swRegister = async () => {\r\n  if (!('serviceWorker' in navigator)) {\r\n    console.log('Service Worker not supported in the browser')\r\n    return\r\n  }\r\n\r\n  const wb = new WorkboxWindow.Workbox('./sw.bundle.js')\r\n\r\n  try {\r\n    await wb.register()\r\n    console.log('Service worker registered')\r\n  } catch (error) {\r\n    console.log('Failed to register service worker', error)\r\n  }\r\n}\r\n\r\nexport default swRegister\r\n","import 'regenerator-runtime'\nimport '../styles/reset.css'\nimport '../styles/main.css'\nimport './nowyear.js'\nimport App from './app'\nimport swRegister from './swregister'\n\nconst app = new App({\n  button: document.querySelector('.hamburgerButton'),\n  drawer: document.querySelector('.menuList'),\n  content: document.querySelector('#app')\n})\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  app.renderPage()\n  swRegister()\n})\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage()\n})\n","const year = document.querySelector('.year')\r\nyear.innerText = new Date().getFullYear()\r\n","import Main from '../views/MainView'\r\nimport Detail from '../views/DetailView'\r\nimport Favorite from '../views/FavoriteView'\r\nconst routes = {\r\n  '/': Main,\r\n  '/detail/:id': Detail,\r\n  '/favorites': Favorite\r\n}\r\nexport default routes\r\n","const urlParser = {\r\n  withCombiner() {\r\n    const url = window.location.hash.slice(1).toLowerCase()\r\n    const splitedUrl = this._spliter(url)\r\n    return this._combiner(splitedUrl)\r\n  },\r\n\r\n  withoutCombiner() {\r\n    const url = window.location.hash.slice(1).toLowerCase()\r\n    return this._spliter(url)\r\n  },\r\n\r\n  _spliter(url) {\r\n    const urlsSplits = url.split('/')\r\n    return {\r\n      resource: urlsSplits[1] || null,\r\n      id: urlsSplits[2] || null,\r\n      verb: urlsSplits[3] || null\r\n    }\r\n  },\r\n\r\n  _combiner(splitedUrl) {\r\n    const splited = (splitedUrl.resource ? `/${splitedUrl.resource}` : '/') + (splitedUrl.id ? '/:id' : '') + (splitedUrl.verb ? `/${splitedUrl.verb}` : '')\r\n    return splited\r\n  }\r\n}\r\n\r\nexport default urlParser\r\n"],"names":["optionGet","method","headers","getAll","fetch","Base","response","ok","json","Error","getById","id","cache","postReview","name","review","body","JSON","stringify","API_URL","IMG_PATH_SMALL","IMG_PATH_MEDIUM","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","i","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getResto","get","getAllRestos","addResto","resto","hasOwnProperty","put","deleteResto","navigator","console","log","wb","WorkboxWindow","register","app","App","button","document","querySelector","drawer","content","window","addEventListener","renderPage","swRegister","innerText","Date","getFullYear","Main","Detail","Favorite","withCombiner","url","location","hash","slice","toLowerCase","splitedUrl","this","_spliter","_combiner","withoutCombiner","urlsSplits","split","resource","verb"],"sourceRoot":""}